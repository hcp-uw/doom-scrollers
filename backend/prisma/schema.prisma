datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

model Genre {
  id Int @id @default(autoincrement())
  value String @unique
  users User[]
  songs Song[]
}

model User {
  id Int @id @default(autoincrement())
  username String
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  preferences Genre[]
  likedSongs Song[]
  profilePictureURL String @default("https://i.pravatar.cc/300")
  seenSongs Song[] @relation("SongSeenBy")
  likedPlaylists PlaylistLike[]
  playlists Playlist[]
  friends User[] @relation("Friends")
  friendedBy User[] @relation("Friends")
  friendRequestsSent FriendRequest[] @relation("FromUser")
  friendRequestsReceived FriendRequest[] @relation("ToUser") 
}

model Song {
  id Int @id @default(autoincrement())
  // Spotify Track ID:
  trackID String @unique
  likedBy User[]
  genreId Int?
  genre Genre? @relation(fields: [genreId], references: [id])
  seenBy User[] @relation("SongSeenBy")
  playlists Playlist[] @relation("SongInPlaylist")
} 

model Playlist {
  id Int @id @default(autoincrement())
  name String
  songs Song[] @relation("SongInPlaylist")
  likes PlaylistLike[]
  author User @relation(fields: [authorId], references: [id])
  authorId Int
}

model PlaylistLike {
  id Int @id @default(autoincrement())
  playlist Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
}

model FriendRequest {
  id Int @id @default(autoincrement())
  from User @relation("FromUser", fields: [fromUserId], references: [id])
  fromUserId Int @unique
  to User @relation("ToUser", fields: [toUserId], references: [id])
  toUserId Int @unique
  read Boolean
}
